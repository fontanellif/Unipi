/** \file queue.h \author Filippo Fontanelli mat 422385 Si dichiara che il contenuto di questo file e' in ogni sua parte opera originale dell' autore.  */#include <assert.h>#include <stdio.h>#include <stdlib.h>#include "comsock.h"#include <pthread.h>#ifndef _QUEUE_H#define _QUEUE_H#define EMPTY 0#define FULL 100/* *Elemento della coda */struct elem_q{	char *message;	struct elem_q *next;};typedef struct elem_q elem_q;/* *Struttura che rappresenta la coda: * - cnt : contatore degli elementi * - front : puntatore alla testa * - rear : puntatore alla coda */typedef struct {	int cnt;	elem_q *front;	elem_q *rear;}queue;/** Inizializza la coda con i parametri di default *  \param  q	coda da inizializzare */int initialize(queue *q);/** Inserisce un messaggio dalla coda *  \param  m 		messaggio da inserire *  \param	mtx		mutex relativa alla coda *  \param	cond	mutex condition relativa alla coda * */void enqueue(char *m,queue *q,pthread_mutex_t *mtx,pthread_cond_t * cond);/** Estrae un messaggio dalla coda *  \param  q 		coda *  \param	mtx		mutex relativa alla coda *  \param	cond	mutex condition relativa alla coda * *  \retval s		messaggio *  \retval NULL	in caso di errore * */char* dequeue(queue *q,pthread_mutex_t *mtx,pthread_cond_t * cond);/** Restituisce la testa della coda *  \param  q 		coda *  \param	mtx		mutex relativa alla coda *  \param	cond	mutex condition relativa alla coda * *  \retval s		messaggio *  \retval NULL	in caso di errore * */char* front(const queue *q,pthread_mutex_t *mtx);/** Verifica se la coda e' vuota *  \param  q 		coda * *  \retval 1	coda non vuota *  \retval 0	coda vuota */int empty(const queue *q);/** Verifica se la coda e' piena *  \param  q 		coda * *  \retval 1	coda non piena *  \retval 0	coda piena */int full(const queue *q,pthread_mutex_t *mtx);#endif